<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 네임스페이스 수정 -->
	<!-- 스프링 시큐리티는  단독으로 설정할 수 있기 때문에 별도로 context.xml 관리  -->
	
		<!-- customLoginSuccessHandler" 빈등록 -->
		<bean id="customLoginSuccessHandler" class="com.test.security.CustomLoginSuccessHandler"></bean>
	
		<!-- CustomAccessDeniedHandler 빈등록 -->
		<bean id="customAccessDeniedHandler" class="com.test.security.CustomAccessDeniedHandler"></bean>
		
		<!-- 스프링 시큐리티 API 제공하는 BCryptPasswordEncoder 패스워드 암호화  해시함수로 특정 문자열을 암호화
		 하고 체크하는 쪽에서는 암호화 된 패스워드가 가능한 패스워드인지만 확인하고 다시 원문으로 되돌리지는 못한다-->
		 <!-- api제공 하므로 빈설정만 하면된다 -->
		<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

		<!-- userDetailsService  -->
		<bean id="customUserDetailsService" class="com.test.security.CustomUserDetailsService"></bean>


	<security:http auto-config="true" use-expressions="true">
	
	<security:intercept-url pattern="/sample/all" access="permitAll"/>
	<security:intercept-url pattern="/sample/member" access="hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')"/>	
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>	
	
	
	<!-- 스프링 제공하는 기본 로그인 화면   -->
	<!-- <security:form-login/> -->
	
	<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccessHandler"/>
	
	<!-- 접근 제한 메시지 특정 URI 구성 -->
<!-- 	<security:access-denied-handler error-page="/accessError"/> -->
	<!-- interface 구성 -->
	<security:access-denied-handler ref="customAccessDeniedHandler"/>
	
	
	<security:logout logout-url="/customLogout" invalidate-session="true"/>

	
	</security:http>





	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
		
		
<!-- 			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
					<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER , ROLE_ADMIN"/>						
			</security:user-service> -->
			
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			
			<security:password-encoder ref="bcryptPasswordEncoder"/> 
		
		</security:authentication-provider>
	
	</security:authentication-manager>

</beans>
